name: Module:machine-learning-workspace
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main  
    paths:
      - '.github/workflows/machine-learning-workspace.yml'
      - 'terraform/machine-learning/machine-learning-workspace/**'
      - '.github/actions/**'

env:
  terraform_workingdir: "terraform/machine-learning/machine-learning-workspace"  
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:     
  terraform-lint:
    name: Run Terraform lint
    runs-on: ubuntu-latest
    defaults:
         run:
          working-directory: "${{ env.terraform_workingdir }}"

    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v2

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: false

  terraform-sec:
    name: Run Terraform tfsec
    needs: 
      - terraform-lint
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@main

    - name: Run tfsec with reviewdog output on the PR
      uses: ./.github/actions/run-terraform-sec

  terratest:
    name: Run Terratest
    needs: 
      - terraform-sec
    runs-on: ubuntu-latest

    defaults:
          run:
            working-directory: "${{ env.terraform_workingdir }}/test"

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Parse Terraform Environment Variables
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      run: | 
        # Parse Azure secret into Terraform variables
        $servicePrincipal = ($env:AZURE_CREDENTIALS | ConvertFrom-Json)
        $env:ARM_CLIENT_ID = $servicePrincipal.clientId
        $env:ARM_CLIENT_SECRET = $servicePrincipal.clientSecret
        $env:ARM_SUBSCRIPTION_ID = $servicePrincipal.subscriptionId
        $env:ARM_TENANT_ID = $servicePrincipal.tenantId
        echo "::add-mask::$env:ARM_CLIENT_ID"
        echo "::add-mask::$env:ARM_CLIENT_SECRET"
        echo "::add-mask::$env:ARM_SUBSCRIPTION_ID"
        echo "::add-mask::$env:ARM_TENANT_ID"
        # Save environment variable setup for subsequent steps
        Get-ChildItem -Path Env: -Recurse -Include ARM_*,TF_VAR_* | ForEach-Object {Write-Output "$($_.Name)=$($_.Value)"} >> $env:GITHUB_ENV
      shell: pwsh

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
          go-version: 1.18.2

    - name: Url instead of
      run: git config --local --remove-section http."https://github.com/" && git config --global url."https://foo:${GH_TOKEN}@github.com/Azure".insteadOf "https://github.com/Azure"
      env:
        GH_TOKEN: ${{ env.GH_TOKEN }}
      
    - name: Setup Dependencies
      run:  go mod init test && go mod tidy
      env:
        GOPATH: "/home/runner/work/azure-labs-modules/azure-labs-modules/${{ env.terraform_workingdir }}"
      
    - name: Unit-test
      run: go test -v 
      env:
        GOPATH: "/home/runner/work/azure-labs-modules/azure-labs-modules/${{ env.terraform_workingdir }}"